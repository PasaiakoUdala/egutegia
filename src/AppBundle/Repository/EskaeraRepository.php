<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * EskaeraRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EskaeraRepository extends EntityRepository
{
    /**
     * @var
     */
    protected $lizentziaType;

    public function setLizentziaType($lizentziaType): void
    {
        $this->lizentziaType = $lizentziaType;
    }

    public function list($q)
    {
        $em = $this->getEntityManager();
        $dql = '';

        switch ($q) {
            case 'no-way':
                $dql = '
                      SELECT e
                      FROM AppBundle:Eskaera e
                      WHERE e.abiatua = 0
                ';
                $query = $em->createQuery($dql);
                break;
            case 'unsigned':
                $dql = '
                      SELECT e
                      FROM AppBundle:Eskaera e
                      WHERE e.amaitua = 0
                ';
                $query = $em->createQuery($dql);
                break;
            case 'unadded':
                $dql = '
                      SELECT e
                      FROM AppBundle:Eskaera e
                      WHERE e.egutegian = 0 and e.amaitua = 1
                ';
                $query = $em->createQuery($dql);
                break;
            case 'conflict':
                $dql = '
                      SELECT e
                      FROM AppBundle:Eskaera e
                      WHERE e.egutegian = 0 and e.amaitua = 1 and e.bideratua = 0 and e.konfliktoa = 1
                ';
                $query = $em->createQuery($dql);
                break;
            case 'justify':
                $dql = '
                      SELECT e
                      FROM AppBundle:Eskaera e
                        INNER JOIN e.type t
                      WHERE t.id = :lizentzia_type
                ';

                $query = $em->createQuery($dql);
                $query->setParameter('lizentzia_type', $this->lizentziaType);

                break;
            case 'nojustified':
                $dql = '
                      SELECT e
                      FROM AppBundle:Eskaera e
                        INNER JOIN e.type t
                      WHERE t.id = :lizentzia_type and e.justifikatua=0
                ';

                $query = $em->createQuery($dql);
                $query->setParameter('lizentzia_type', $this->lizentziaType);

                break;
            default:
                $dql = '
                      SELECT e
                      FROM AppBundle:Eskaera e
                ';
                break;
        }


        return $query->getResult();
    }

    public function findAllByUser($id)
    {
        $em = $this->getEntityManager();

        $dql = '
            SELECT e
            FROM AppBundle:Eskaera e
              INNER JOIN e.user u
            WHERE u.id = :id
        ';

        $query = $em->createQuery($dql);
        $query->setParameter('id', $id);

        return $query->getResult();
    }

    public function findBideratugabeak()
    {
        $em = $this->getEntityManager();
        $dql = '
            SELECT e
            FROM AppBundle:Eskaera e
            WHERE e.abiatua = false AND e.amaitua = false
        ';
        $query = $em->createQuery($dql);

        return $query->getResult();
    }

    public function checkErabiltzaileaBateraezinZerrendan($userid)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('g')

            ->from('AppBundle:Gutxienekoak', 'g')
            ->innerJoin('g.gutxienekoakdet', 'gd')
            ->innerJoin('gd.user', 'u')

            ->where('u.id = :userid')

            ->setParameter('userid', $userid)
            ;

        return $qb->getQuery()->getResult();
    }

    public function checkCollision($userid, $fini, $ffin)
    {
        $qb = $this->createQueryBuilder('e');

        $qb->innerJoin('e.calendar', 'c')
           ->innerJoin('c.user', 'u')
           ->where('u.id=:userid')
           ->andWhere('(:fini BETWEEN e.hasi AND e.amaitu) OR (:ffin BETWEEN e.hasi AND e.amaitu)')
           ->setParameter('userid', $userid)
           ->setParameter('fini', $fini)
           ->setParameter('ffin', $ffin)
        ;

        return $qb->getQuery()->getResult();
    }

}
