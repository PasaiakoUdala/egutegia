<?php

/*
 *     Iker Ibarguren <@ikerib>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository.
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function getEvents($calendarid)
    {
        $em = $this->getEntityManager();
        /** @var $query \Doctrine\DBAL\Query\QueryBuilder */
        $query = $em->createQuery('
            SELECT e
                FROM AppBundle:Event e 
                  LEFT JOIN e.calendar c
                WHERE c.id = :calendarid
        ');

        //$consulta = $em->createQuery($dql);
        $query->setParameter('calendarid', $calendarid);

        return $query->getResult();
    }

    public function findCalendarSelfEvents($calendarid) {

        // TODO: Remove hardcoded type id

        $em = $this->getEntityManager();
        /** @var $query \Doctrine\DBAL\Query\QueryBuilder */
        $query = $em->createQuery('
            SELECT e
                FROM AppBundle:Event e 
                  LEFT JOIN e.calendar c
                WHERE c.id = :calendarid
                AND e.type = 5
        ');

        $query->setParameter('calendarid', $calendarid);

        return $query->getResult();
    }

    public function checkCollision($userid, $fini, $ffin) {
        $qb = $this->createQueryBuilder( 'e' );

            $qb->innerJoin('e.calendar','c')
            ->innerJoin('c.user', 'u')
            ->where('u.id=:userid')
            //->andWhere($qb->expr()->between(':fini', 'e.start_date', 'e.end_date'))
            ->andWhere('(:fini BETWEEN e.start_date AND e.end_date) OR (:ffin BETWEEN e.start_date AND e.end_date)')
            ->setParameter('userid',$userid)
            ->setParameter('fini',$fini)
            ->setParameter('ffin',$ffin)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findKonpentsatuak()
    {
        $sql = "SELECT sum(`event`.hours) as suma, calendar.id, user.id, user.username, user.department, user.lanpostua, calendar.year" .
            " FROM `event` INNER JOIN calendar ON calendar.id = event.calendar_id" .
            " INNER JOIN `type` ON type.id = `event`.`type_id`" .
            " INNER JOIN `user` on user.id = calendar.user_id" .
            " WHERE type_id=:id and calendar.year = :year" .
            " GROUP BY calendar.id";

        $params = array(
            'id' => 6,
            'year' => 2018
        );

        return $this->getEntityManager()->getConnection()->executeQuery( $sql, $params )->fetchAll();

    }

}
