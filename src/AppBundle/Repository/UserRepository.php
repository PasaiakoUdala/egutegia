<?php

/*
 *     Iker Ibarguren <@ikerib>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace AppBundle\Repository;

use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findAllUsersAndCalendars()
    {
        /** @var \Doctrine\ORM\QueryBuilder $qb */
        $qb = $this->createQueryBuilder('u')
                   ->select('u,c')
                   ->innerJoin('u.calendars', 'c')
                   ->orderBy('u.username');

        return $qb->getQuery()->getResult();
    }

    public function getByUsername($username)
    {
        $em = $this->getEntityManager();
        /** @var $query QueryBuilder */
        $query = $em->createQuery('
            SELECT u
                FROM AppBundle:User u
                WHERE u.username like :username
        ');
        $query->setParameter('username', $username);

        return $query->getOneOrNullResult();
    }

    public function findByRole($role): array
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from($this->_entityName, 'u')
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%"'.$role.'"%');

        return $qb->getQuery()->getResult();
    }

    public function findSailGuztiak(): ?array
    {
        $sql = /** @lang text */
            'SELECT DISTINCT(department) FROM `user` WHERE department IS NOT NULL ORDER BY department ASC ';
        $params = array();

        try {
            return $this->getEntityManager()->getConnection()->executeQuery($sql, $params)->fetchAll();
        } catch (DBALException $e) {
            throw new $e;
        }
    }

    public function findLanpostuGuztiak(): ?array
    {
        $sql = /** @lang text */
            'SELECT DISTINCT(lanpostua) FROM `user` WHERE lanpostua IS NOT NULL ORDER BY lanpostua';
        $params = array();

        try {
            return $this->getEntityManager()->getConnection()->executeQuery($sql, $params)->fetchAll();
        } catch (DBALException $e) {
            throw new $e;
        }
    }
}
